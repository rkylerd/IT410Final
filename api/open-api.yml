openapi: "3.0.0"
info:
  description: "This is the Caps-API documentation."
  version: "1.0.0"
  title: "Swagger Caps Store"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "caps@gmail.com"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
tags:
- name: "item"
  description: "Everything about your Caps"
  externalDocs:
    description: "Find out more"
    url: "http://swagger.io"
- name: "store"
  description: "Access to Capstore orders"
- name: "user"
  description: "Operations about user"
  externalDocs:
    description: "Find out more about our store"
    url: "http://swagger.io"
paths:
  /api/item:
    post:
      tags:
      - "item"
      summary: "Add a new item to the store"
      description: ""
      operationId: "addItem"
      x-controller: items
      x-operation: addItem
      security:
        - bearerAuth: []
      requestBody:
        content:
          'application/json':
            schema:
              $ref: "#/components/schemas/Item"
      responses:
        "201":
          description: "Successfully created item"
        "500":
          description: "Internal server error"
        "403":
          description: "User does not have permission to access this resource"
        "401":
          description: "Must authenticate"
    get:
      tags:
      - "store"
      summary: "gets all items"
      description: "For valid response try integer IDs with value >= 1 and <= 10.         Other values will generated exceptions"
      operationId: "getItems"
      x-controller: items
      x-operation: getItems
      parameters:
      - name: "category"
        in: "query"
        description: "Category values that need to be considered for filter"
        schema:
          type: string
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                type: array
                items:    
                  $ref: '#/components/schemas/Item'
        "401":
          description: "Must authenticate"
  /api/item/{itemId}:
    get:
      tags:
      - "item"
      summary: "Find item by ID"
      description: "Returns a single item"
      operationId: "getItemById"
      x-controller: items
      x-operation: getItemById
      parameters:
      - name: "itemId"
        in: "path"
        description: "ID of item to return"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Item"
        "400":
          description: "Invalid ID supplied"
        "401":
          description: "Must authenticate"
        "404":
          description: "Item not found"
    put:
      tags:
      - "item"
      summary: "Updates a item in the store with form data"
      description: ""
      operationId: "updateItem"
      x-controller: items
      x-operation: updateItem
      security:
        - bearerAuth: []
      requestBody:
        content:
          'application/json':
            schema:
              $ref: "#/components/schemas/Item"
      parameters:
      - name: "itemId"
        in: "path"
        description: "ID of item that needs to be updated"
        required: true
        schema:
          type: "string"
      responses:
        "400":
          description: "Invalid ID supplied"
        "401":
          description: "Must authenticate"
        "403":
          description: "User does not have permission to access this resource"
        "404":
          description: "Item not found"
        "500":
          description: "Internal Server Error"
        "200":
          description: "Item was updated"
          content:
            application/json:
              schema:
                properties:
                  message: 
                    type: string
    delete:
      tags:
      - "item"
      summary: "Deletes a item"
      description: ""
      operationId: "deleteItem"
      x-controller: items
      x-operation: deleteItem
      security:
        - bearerAuth: []
      parameters:
      - name: "api_key"
        in: "header"
        required: false
        schema:
          type: "string"
      - name: "itemId"
        in: "path"
        description: "Item id to delete"
        required: true
        schema:
          type: "string"
      responses:
        "400":
          description: "Invalid ID supplied"
        "401":
          description: "Must authenticate"
        "403":
          description: "User does not have permission to access this resource"
        "404":
          description: "Item not found"
        "500":
          description: "Internal Server Error"
        "200":
          description: "Item deleted"
          content: 
            application/json:
              schema:
                properties:
                  message:
                    type: string
  /api/item/{itemId}/uploadImage:
    post:
      tags:
      - "item"
      summary: "uploads an image"
      description: ""
      operationId: "uploadImage"
      x-controller: items
      x-operation: uploadItemImage
      security:
        - bearerAuth: []
      requestBody:
        content:
          'application/json':
            schema:
              $ref: "#/components/schemas/Image"
      parameters:
      - name: "itemId"
        in: "path"
        description: "ID of item to update"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                type: string
        "401":
          description: "Must authenticate"
        "403":
          description: "User does not have permission to access this resource"
        "500":
          description: "Internal Server Error"
  /api/item/count:
    get:
      tags:
      - "item"
      summary: "get number of items"
      description: ""
      operationId: "itemCount"
      x-controller: items
      x-operation: itemCount
      security:
        - bearerAuth: []
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                type: number
        "500":
          description: "Internal Server Error"
  /api/item/bypage:
    get:
      tags:
      - "item"
      summary: "gets items per page"
      description: ""
      operationId: "getItemsByPage"
      x-controller: items
      x-operation: getItemsByPage
      parameters:
      - name: "page"
        in: "query"
        description: "page number to get"
        schema:
          type: string
      - name: "size"
        in: "query"
        description: "number of rows per page"
        schema:
          type: string
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                type: array
                items:    
                  $ref: '#/components/schemas/Item'
        "500":
          description: "Internal Server Error"
  /api/order:
    get:
      tags:
      - "store"
      summary: "Find purchase order by ID"
      description: "For valid response try integer IDs with value >= 1 and <= 10.         Other values will generated exceptions"
      operationId: "getOrders"
      x-controller: orders
      x-operation: getOrders
      security:
        - bearerAuth: []
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                type: array
                items:    
                  $ref: '#/components/schemas/Order'
        "401":
          description: "Must authenticate"
    post:
      tags:
      - "store"
      summary: "Place an order with items"
      description: ""
      operationId: "createOrder"
      x-controller: orders
      x-operation: createOrder
      security:
        - bearerAuth: []
      requestBody:
        content:
          'application/json':
            schema:
              $ref: "#/components/schemas/Order"
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
        "400":
          description: "Invalid Order"
        "401":
          description: "Must authenticate"
  /api/order/{orderId}:
    get:
      tags:
      - "store"
      summary: "Find purchase order by ID"
      description: "For valid response try integer IDs with value >= 1 and <= 10.         Other values will generated exceptions"
      operationId: "getOrderById"
      x-controller: orders
      x-operation: getOrderById
      security:
        - bearerAuth: []
      parameters:
      - name: "orderId"
        in: "path"
        description: "ID of item that needs to be fetched"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
        "400":
          description: "Invalid ID supplied"
        "401":
          description: "Must authenticate"
        "404":
          description: "Order not found"
    delete:
      tags:
      - "store"
      summary: "Delete purchase order by ID"
      description: "For valid response try integer IDs with positive integer value.         Negative or non-integer values will generate API errors"
      operationId: "deleteOrder"
      x-controller: orders
      x-operation: deleteOrder
      security:
        - bearerAuth: []
      parameters:
      - name: "orderId"
        in: "path"
        description: "ID of the order that needs to be deleted"
        required: true
        schema:
          type: "string"
      responses:
        "400":
          description: "Invalid ID supplied"
        "401":
          description: "Must authenticate"
        "404":
          description: "Order not found"
        "500": 
          description: "Internal server error"
        "200":
          description: "Order deleted"
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
  /api/order/findByStatus:
    get:
      tags:
      - "order"
      summary: "Finds Orders by status"
      description: "Multiple status values can be provided with pipe '|' separated strings"
      operationId: "findOrdersByStatus"
      x-controller: orders
      x-operation: getOrdersByStatus
      security:
        - bearerAuth: []
      parameters:
      - name: "status"
        in: "query"
        description: "Status values that need to be considered for filter"
        required: true
        schema:
          type: string
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                type: array
                items:    
                  $ref: '#/components/schemas/Order'
        "400":
          description: "Invalid status value"
        "401":
          description: "Must authenticate"
        "403":
          description: "User does not have permission to access this resource"
  /api/user:
    get:
      tags:
      - "user"
      summary: "Get all users"
      description: ""
      operationId: "getUsers"
      x-controller: users
      x-operation: getUsers
      security:
        - bearerAuth: []
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
        "400":
          description: "Invalid username supplied"
        "401": 
          description: "User not authenticated"
        "403": 
          description: "User not authorized"
        "404":
          description: "User not found"
        "500": 
          description: "Internal server error"
    post:
      tags:
      - "user"
      summary: "Sign up"
      description: "This can only be done by the logged in user."
      operationId: "register"
      x-controller: users
      x-operation: register
      requestBody:
        content:
          'application/json':
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "201": 
          description: "user successfully created"
        "500": 
          description: "internal server error"
        "422":
          description: "duplicate username or email"
  /api/user/me:
    get:
      tags:
      - "user"
      summary: "Get the current logged-in user"
      description: ""
      operationId: "getCurrentUser"
      x-controller: users
      x-operation: getCurrentUser
      security:
        - bearerAuth: []
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401": 
          description: "User not authenticated"
        "404":
          description: "User not found"
        "500": 
          description: "Internal server error"
  /api/cart/{username}:
    post:
      tags:
      - "item"
      summary: "Add a new item to the store"
      description: ""
      operationId: "addToUserCart"
      x-controller: users
      x-operation: addToUserCart
      security:
        - bearerAuth: []
      parameters:
      - name: username
        in: path
        required: true
        description: the user identifier, as username 
        schema:
          type: string
      requestBody:
        content:
          'application/json':
            schema:
              $ref: "#/components/schemas/CartItem"
      responses:
        "201":
          description: "Successfully added item to cart"
        "500":
          description: "Internal server error"
        "403":
          description: "User does not have permission to access this resource"
        "401":
          description: "Must authenticate"
  /api/cart/{username}/{itemId}:
    delete:
      tags:
      - "user"
      summary: "Remove item(s) from cart"
      description: "This can only be done by the logged in user."
      operationId: "removeFromUserCart"
      x-controller: users
      x-operation: removeFromUserCart
      security:
        - bearerAuth: []
      parameters:
      - name: username
        in: path
        required: true
        description: the user identifier, as username 
        schema:
          type: string
      - name: itemId
        in: path
        required: true
        description: the item identifier, as itemId 
        schema:
          type: string
      - name: "qty"
        in: "query"
        description: "Quantity of the item to remove"
        schema:
          type: number
      - name: "size"
        in: "query"
        description: "Size of the item to remove"
        schema:
          type: string
      responses:
        "400":
          description: "Invalid username supplied"
        "500":
          description: "Internal server error"
        "204":
          description: "Item was removed from cart"
        "403":
          description: "Not authorized to delete from cart"
        "401": 
          description: "Must be logged in to perform action"
  /api/user/{username}:
    get:
      tags:
      - "user"
      summary: "Get user by user name"
      description: ""
      operationId: "getUserByUsername"
      x-controller: users
      x-operation: getUserByUsername
      security:
        - bearerAuth: []
      parameters:
      - name: username
        in: path
        required: true
        description: the user identifier, as username 
        schema:
          type: string
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: "Invalid username supplied"
        "401": 
          description: "User not authenticated"
        "403": 
          description: "User not authorized"
        "404":
          description: "User not found"
        "500": 
          description: "Internal server error"
    put:
      tags:
      - "user"
      summary: "Updated user"
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      x-controller: users
      x-operation: updateUser
      security:
        - bearerAuth: []
      parameters:
      - name: username
        in: path
        required: true
        description: the user identifier, as username 
        schema:
          type: string
      requestBody:
        content:
          'application/json':
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "400":
          description: "Invalid user supplied"
        "404":
          description: "User not found"
        "401": 
          description: "User not authenticated"
        "204":
          description: "Successful update of User"
        "500":
          description: "Internal server error"   
    delete:
      tags:
      - "user"
      summary: "Delete user"
      description: "This can only be done by the logged in user."
      operationId: "deleteUser"
      x-controller: users
      x-operation: deleteUser
      security:
        - bearerAuth: []
      parameters:
      - name: username
        in: path
        required: true
        description: the user identifier, as username 
        schema:
          type: string
      responses:
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
        "500":
          description: "Internal server error"
        "204":
          description: "user was deleted"
        "403":
          description: "Not authorized to delete user"
        "401": 
          description: "Must be logged in to perform action"
  /api/user/{username}/orders:
    get:
      tags:
      - "store"
      summary: "Find orders belonging to a specific user"
      operationId: "getOrdersOfUser"
      x-controller: orders
      x-operation: getOrdersOfUser
      security:
        - bearerAuth: []
      parameters:
      - name: username
        in: path
        required: true
        description: the user identifier, as username 
        schema:
          type: string
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                type: array
                items:    
                  $ref: '#/components/schemas/Order'
        "401":
          description: "Must authenticate"
  /api/user/login:
    put:
      tags:
      - "user"
      summary: "Logs user into the system"
      description: ""
      operationId: "login"
      x-controller: users
      x-operation: login
      requestBody:
        content:
          'application/json':
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                type: "string"
          headers:
            X-Rate-Limit:
              description: "calls per hour allowed by the user"
              schema:
                type: "integer"
                format: "int32"
            X-Expires-After:
              description: "date in UTC when token expires"
              schema:
                type: "string"
                format: "date-time"
        "400":
          description: "Invalid username/password supplied"
        "500":
          description: "Internal server error"
  /api/user/{username}/logout:
    put:
      tags:
      - "user"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "logout"
      x-controller: users
      x-operation: logout
      security:
        - bearerAuth: []
      parameters:
      - name: username
        in: path
        required: true
        description: the user identifier, as username 
        schema:
          type: string
      responses:
        "204": 
          description: "user logged out"
        "401":
          description: "Must authenticate"
        "500":
          description: "Internal server error"
components:
    responses:
      UnauthorizedError:
        description: Access token is missing or invalid
    securitySchemes:
      bearerAuth:
        type: http
        scheme: bearer
        bearerFormat: JWT
    schemas:
      User:
          properties:
            _id:
              type: string
              readOnly: true
            username:
              type: string
            email:
              type: string
            password:
              type: string
              writeOnly: true
            fName:
              type: string
            lName:
              type: string
            phone:
              type: string
            addresses:
              type: array
              items:    
                allOf:
                  - $ref: '#/components/schemas/Address'
            cart:
              type: array
              items:    
                $ref: '#/components/schemas/CartItem'
      Item:
          properties:
            _id:
              type: string
            name:
              type: string
            price:
              type: number
            category:
              type: string
            description:
              type: string
            imageUrl:
              type: string
            stock: 
              type: number
            sizes: 
              allOf:
                - $ref: '#/components/schemas/Sizes'
            promotionalFlag:
              type: boolean
            promotionalPrice:
              type: number
      Sizes:
        type: array  
        items:
          type: string
      Order:
        properties:
          _id:
            type: string
            readOnly: true
          price:
            type: number
          dateCreated:
            type: string
            readOnly: true
          expectedArrivalDate:
            type: string
            readOnly: true
          label:
            type: string
            readOnly: true
          trackingId:
            type: string
            readOnly: true
          items:
            type: array
            items:
              $ref: '#/components/schemas/CartItem'
          status:
            type: string
            readOnly: true
          address:
              $ref: '#/components/schemas/Address'
          username:
            type: string
      CartItem:
          properties:
            _id:
              type: string
            name:
              type: string
            price:
              type: number
            imageUrl:
              type: string
            qty: 
              type: number
            size: 
              type: string
      Address:
        type: object
        properties:
          street1:
            type: string
          street2:
            type: string
          city:
            type: string
          state:
            type: string
          zip:
            type: string
      Image:
        type: object
        properties:
          name:
            type: string
          base64:
            type: string
          type: 
            type: string
      Page:
        type: object
        properties:
          page:
            type: number
          limit:
            type: number
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"