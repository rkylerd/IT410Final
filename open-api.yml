openapi: "3.0.0"
info:
  description: "This is the Caps-API documentation."
  version: "1.0.0"
  title: "Swagger Caps Store"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "caps@gmail.com"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
tags:
- name: "item"
  description: "Everything about your Caps"
  externalDocs:
    description: "Find out more"
    url: "http://swagger.io"
- name: "store"
  description: "Access to Capstore orders"
- name: "user"
  description: "Operations about user"
  externalDocs:
    description: "Find out more about our store"
    url: "http://swagger.io"
paths:
  /item:
    post:
      tags:
      - "item"
      summary: "Add a new item to the store"
      description: ""
      operationId: "addItem"
      requestBody:
        content:
          'application/json':
            schema:
              $ref: "#/components/schemas/Item"
      responses:
        "201":
          description: "Successfully created item"
        "500":
          description: "Internal server error"
        "403":
          description: "User does not have permission to access this resource"
        "401":
          description: "Must authenticate"
  /order/findByStatus:
    get:
      tags:
      - "order"
      summary: "Finds Orders by status"
      description: "Multiple status values can be provided with comma separated strings"
      operationId: "findOrdersByStatus"
      parameters:
      - name: "status"
        in: "query"
        description: "Status values that need to be considered for filter"
        required: true
        schema:
          type: string
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Order"
        "400":
          description: "Invalid status value"
  /item/{itemId}:
    get:
      tags:
      - "item"
      summary: "Find item by ID"
      description: "Returns a single item"
      operationId: "getItemById"
      parameters:
      - name: "itemId"
        in: "path"
        description: "ID of item to return"
        required: true
        schema:
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Item"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Item not found"
    put:
      tags:
      - "item"
      summary: "Updates a item in the store with form data"
      description: ""
      operationId: "updateItem"
      requestBody:
        content:
          'application/json':
            schema:
              $ref: "#/components/schemas/Item"
      parameters:
      - name: "itemId"
        in: "path"
        description: "ID of item that needs to be updated"
        required: true
        schema:
          type: "integer"
          format: "int64"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Item not found"
        "500":
          description: "Internal Server Error"
        "200":
          description: "Item was updated"
          content:
            application/json:
              schema:
                properties:
                  message: 
                    type: string
    delete:
      tags:
      - "item"
      summary: "Deletes a item"
      description: ""
      operationId: "deleteItem"
      parameters:
      - name: "api_key"
        in: "header"
        required: false
        schema:
          type: "string"
      - name: "itemId"
        in: "path"
        description: "Item id to delete"
        required: true
        schema:
          type: "integer"
          format: "int64"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Item not found"
        "500":
          description: "Internal Server Error"
        "200":
          description: "Item deleted"
          content: 
            application/json:
              schema:
                properties:
                  message:
                    type: string
  /item/{itemId}/uploadImage:
    post:
      tags:
      - "item"
      summary: "uploads an image"
      description: ""
      operationId: "uploadFile"
      requestBody:
        content:
          'application/json':
            schema:
              $ref: "#/components/schemas/Image"
      parameters:
      - name: "itemId"
        in: "path"
        description: "ID of item to update"
        required: true
        schema:
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                type: string
        "500":
          description: "Internal Server Error"
  /store/order:
    post:
      tags:
      - "store"
      summary: "Place an order for a item"
      description: ""
      operationId: "placeOrder"
      requestBody:
        content:
          'application/json':
            schema:
              $ref: "#/components/schemas/Order"
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
        "400":
          description: "Invalid Order"
  /store/order/{orderId}:
    get:
      tags:
      - "store"
      summary: "Find purchase order by ID"
      description: "For valid response try integer IDs with value >= 1 and <= 10.         Other values will generated exceptions"
      operationId: "getOrderById"
      parameters:
      - name: "orderId"
        in: "path"
        description: "ID of item that needs to be fetched"
        required: true
        schema:
          type: "integer"
          maximum: 10.0
          minimum: 1.0
          format: "int64"
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Order not found"
    delete:
      tags:
      - "store"
      summary: "Delete purchase order by ID"
      description: "For valid response try integer IDs with positive integer value.         Negative or non-integer values will generate API errors"
      operationId: "deleteOrder"
      parameters:
      - name: "orderId"
        in: "path"
        description: "ID of the order that needs to be deleted"
        required: true
        schema:
          type: "integer"
          minimum: 1.0
          format: "int64"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Order not found"
        "500": 
          description: "Internal server error"
        "200":
          description: "Order deleted"
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
  /user:
    post:
      tags:
      - "user"
      summary: "Create user"
      description: "This can only be done by the logged in user."
      operationId: "createUser"
      requestBody:
        content:
          'application/json':
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "201": 
          description: "user successfully created"
        "500": 
          description: "internal server error"
        "422":
          description: "duplicate username or email"
  /user/login:
    put:
      tags:
      - "user"
      summary: "Logs user into the system"
      description: ""
      operationId: "loginUser"
      requestBody:
        content:
          'application/json':
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                type: "string"
          headers:
            X-Rate-Limit:
              description: "calls per hour allowed by the user"
              schema:
                type: "integer"
                format: "int32"
            X-Expires-After:
              description: "date in UTC when token expires"
              schema:
                type: "string"
                format: "date-time"
        "400":
          description: "Invalid username/password supplied"
        "500":
          description: "Internal server errror"
  /user/{username}/logout:
    delete:
      tags:
      - "user"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "logoutUser"
      parameters:
      - name: username
        in: path
        required: true
        description: the user identifier, as username 
        schema:
          type: string
      responses:
        "204": 
          description: "user logged out"
        "500":
          description: "Internal server error"
  /user/{username}:
    get:
      tags:
      - "user"
      summary: "Get user by user name"
      description: ""
      operationId: "getUserByName"
      parameters:
      - name: username
        in: path
        required: true
        description: the user identifier, as username 
        schema:
          type: string
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
        "500": 
          description: "Internal server error"
    put:
      tags:
      - "user"
      summary: "Updated user"
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      parameters:
      - name: username
        in: path
        required: true
        description: the user identifier, as username 
        schema:
          type: string
      requestBody:
        content:
          'application/json':
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "400":
          description: "Invalid user supplied"
        "404":
          description: "User not found"
        "403": 
          description: "User not authorized"
        "401": 
          description: "User not authenticated"
        "204":
          description: "Successful update of User"
        "500":
          description: "Internal server error"
        
    delete:
      tags:
      - "user"
      summary: "Delete user"
      description: "This can only be done by the logged in user."
      operationId: "deleteUser"
      parameters:
      - name: username
        in: path
        required: true
        description: the user identifier, as username 
        schema:
          type: string
      responses:
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
        "500":
          description: "Internal server error"
        "204":
          description: "user was deleted"
        "403":
          description: "Not authorized to delete user"
        "401": 
          description: "Must be logged in to perform action"
components:
  schemas:
    User:
        properties:
          id:
            type: integer
            readOnly: true
          username:
            type: string
          email:
            type: string
          password:
            type: string
            writeOnly: true
          fname:
            type: string
          lname:
            type: string
          phone:
            type: number
          addresses:
            type: array
            items:    
              allOf:
                - $ref: '#/components/schemas/Address'
    Item:
        properties:
          id:
            type: integer
            readOnly: true
          name:
            type: string
          price:
            type: number
          category:
            type: string
          descrition:
            type: string
          imageUrl:
            type: string
          stock: 
            type: number
          sizes: 
            allOf:
              - $ref: '#/components/schemas/Sizes'
          promotionalFlag:
            type: boolean
          promotionalPrice:
            type: number
    Sizes:
      type: array  
      items:
        type: string
    Order:
      properties:
        id:
          type: integer
          readOnly: true
        price:
          type: number
        dateCreated:
          type: string
          readOnly: true
        inPersonPickup:
          type: boolean
        expectedArrivalDate:
          type: string
          readOnly: true
        label:
          type: string
          readOnly: true
        trackingId:
          type: string
          readOnly: true
        items:
          type: array
          items:
            $ref: '#/components/schemas/Item'
        status:
          type: string
          readOnly: true
        address:
          allOf:
            - $ref: '#/components/schemas/Address'
        userid:
          type: string
    Address:
      type: object
      properties:
        street1:
          type: string
        street2:
          type: string
        city:
          type: string
        state:
          type: string
        zip:
          type: number
    Image:
      type: object
      properties:
        name:
          type: string
        base64:
          type: string
        type: 
          type: string
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"